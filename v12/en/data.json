{
    "version": "0.1",
    "pageContent": 
	{
        "_comments": "object that contains data for page labels, buttons, etc.",
        "navItems": 
		{
            "_common": 
			{
                "buttonBackToGallery": 
				{
                    "name": "Back To Gallery",
					"method": "backToGallery()",
					"idName": "backToGallery"	
                },
                "buttonStartTutorial": 
				{
                    "name": "Start Tutorial",
					"method": "startTutorialFromDetailsScreen()",
					"idName": "startTutorial"
                },
				"buttonViewDetails": 
				{
                    "name": "View Details",
					"method": "viewDetails()",
					"idName": "stepsViewDetails"	
                }
            }
        }
    },
    "tutorial": 
	{
        "_common": 
		{
            "name": "JMS - Using the JMSOutput and JMSReceive nodes with messages and queues",
            "shortDescription": "Learn how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager.",
            "durationText": "This tutorial takes approximately",
            "durationTime": "10 minutes",
            "_resourceToOpenComment": "The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
            "resourceToOpen": "MainFlow",
            "helpLink": 
			{
                "text": "IBM Documentation",
           		"link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"
            }
        },
        "pageDetails": 
		{
            "topicsName": "Tutorial topics",
            "_topicListComment": "A short list of product concepts or tasks demonstrated by this tutorial",
            "topicList": 
			[
                {
                    "title": "JMSOutput node"
                },
				{
                    "title": "JMSReceive node"
                }
            ],
            "outcomesName": "Learning outcomes",
            "_outcomesComment": "A description of what the user will have learned or accomplished by running this tutorial.",
            "outcomeList": 
			[
                {
                    "title": "Use IBM App Connect Enterprise to interact with IBM MQ using JMS configuration."
                }
            ],
            "summary": 
			{
                "overviewName": "OVERVIEW",
                "_overviewComment": "A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
                "sections": 
				[
                    {
                        "section": "This tutorial demonstrates two simple message flows. The first is driven using an input message over HTTP which is echoed back to the requestor unchanged, and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node adds a JMS header, and then a Mapping node prepares a fixed string of data in the message body. The message is passed to a JMSOutput node and written to a JMS destination queue. The second message flow starts from an HTTPInput message which can receive any input. The next node is a JMSReceive node which reads a meesage from the same JMS destination which was written to by the first flow. If a message is read from the queue, then the following JMSHeader node removes the JMS header, and passes the body back to the original requestor using an HTTPReply node.  If no message is read from the queue, a Mapping node constructs a simple HTTP reply instead."
                    },
                    {
                        "section": "The tutorial requires an integration node owned server, or a standalone server."
                    },
                    {
                        "section": "In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses JMS nodes which are configured to interact with an IBM MQ queue manager, but which could easily be substituted for another JMS provider if you wish. There are no other pre-requisites needed by the scenario."
                    }
                ]
            },
			"helpLinks": 
			{
				"_helpLinksComment": "Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
				"title": "Find out more",
				"details": 
				[
					{
						"title": "IBM Documentation link to ",
						"description": "Developing integration solutions by using applications",
						"link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm",
						"type": "web"
					}
				]
			}
        },
        "pageSteps": 
		{
            "create": 
			{
                "overview": 
				{
                    "name": "Create",
                    "heading": "Import projects",
                    "_createComment": "A description of what will happen when the user clicks Import.",
                    "sections": 
					[
                        {
                            "section": "When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleJMSOutput</span> and an application named <span class='application'>ExampleJMSReceive</span>."
                        },
                        {
                            "section": "<span class='application'>ExampleJMSOutput</span> provides a message flow named <span class='resource'>JMSOutput</span>."
						},
						{
                            "section": "<span class='application'>ExampleJMSReceive</span> provides a message flow named <span class='resource'>JMSReceive</span>."
						},
						{
							"section": "The <span class='resource'>JMSOutput</span> message flow is driven by an HTTPInput node configured to receive any input message as BLOB. The message is echoed back using an HTTPReply node and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node creates a new JMS header, followed by a Mapping node which creates a new message body which is hardcoded to the value <code>This hardcoded data will be written to and read from the JMS queue</code>. Finally a JMSOutput node puts the message on to a JMS destination queue with the name jmsexample."
						},
						{
							"section": "The <span class='resource'>JMSReceive</span> message flow is driven by an HTTPInput node and uses a JMSReceive node to read a message from the output queue of the first flow - jmsexample. If a message is read from the queue, then the following JMSHeader node removes the JMS header, and passes the body back to the original requestor using an HTTPReply node.  If no message is read from the queue, a Mapping node constructs a simple HTTP reply instead."
						},
                        {
			    			"section": "Once imported using the link on the right, the applications <span class='application'>ExampleJMSOutput</span> and <span class='application'>ExampleJMSReceive</span> are ready to be deployed and tested. To deploy, you can use the provided BAR files, as described on the Prepare tab."
						}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
                        {
                            "title": "IBM Documentation link to ",
                            "description": "Developing integration solutions by using applications",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm",
							"type": "web"
                        }
                    ]
                },
                "actions": 
				{
                    "title": "Create Actions",
                    "details": 
					[
                        {
                            "name": "Import",
                            "method": "importArtifacts()"
                        }
                    ]
                }
            },
            "prepare": 
			{
                "overview": 
				{
                    "name": "Prepare",
                    "heading": "Create a queue manager and integration node, set up the JMS configuration, and then deploy the message flows",
                    "_prepareComment": "A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
                    "sections": 
		     [
			 {
                     "section":"The tutorial requires MQ and JMS definitions.  Execute the following steps to prepare your environment accordingly:",
                     "steps":{
                        "type":"ordered",
                        "details":[

						   	{
                              "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                                    },
                                    {
                                       "details":"Next create a queue and a listener by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(EXAMPLE)</code><br><code>define listener(LISTENER1) TRPTYPE(TCP) PORT(2414)</code><br><code>start listener(LISTENER1)</code>"
                                    },
									{
										"details":"The connection to the queue manager will attempt to use the default server connection channel named SYSTEM.DEF.SVRCONN and will not flow a username / password on the connection. If the user running the tutorial is an MQ Administrator then it is necessary to disable MQ Channel Authentication before running the tutorial by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>alter qmgr CHLAUTH(DISABLED)</code><br><code>alter authinfo(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) CHCKCLNT(OPTIONAL)</code><br><code>end</code><br><code>endmqm -i TESTQM</code><br><code>strmqm TESTQM</code>"	
									}
                                 ]
                              }
                           },							
							{
                              "details":"When using the IBM App Connect Enterprise JMS nodes in a message flow, the configuration required to locate the JMS provider queues is defined using a JNDI (Java Naming and Directory Interface) bindings file. Your JMS provider is likely to provide an adminstration tool or script to help you generate this bindings file. This tutorial uses IBM MQ as JMS provider, and the instructions below describe how to set up this bindings file. These instructions assume you are running this tutorial on a Windows machine. For help with other platforms, please consult the product documentation. Set up the JMS configuration for the IBM MQ queue manager by completing the following steps:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"On the filesystem, create the folder <code>C:\\JNDI-Directory</code> (unless you have previously editted your JMSAdmin.config file, this is where the JNDI bindings file will be generated when you complete the following instructions)."
                                    },
									{
										"details":"IBM MQ provides a JMS Admin Tool Execution Script called <span class='resource'>JMSAdmin.bat</span>. Run this script, passing in a definitions file which is provided in the ExampleJMS application project which you previously imported to your Toolkit workspace. Assuming you used the default location for your MQ installation, and that your Toolkit workspace is defined at C:\\ToolkitWorkspace, open a command console and execute the following commands:<br><code>cd C:\\Program Files\\IBM\\MQ\\Java\\bin</code><br><code>JMSAdmin &lt; \"C:\\ToolkitWorkspace\\ExampleJMSOutput\\jms.defs\"</code>"
									}									
                                 ]
                              }
                           },
						   {
                              "details":"Create an integration node by completing the following steps. Note that the integration node does not necessarily need to be co-located with the queue manager:",
                              "substeps":{
                                 "type":"ordered",
                                 "details":[
                                    {
                                       "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span></code>"
                                    },
									{
                                       "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                                    },
                                    {
                                       "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                                    }
                                 ]
                              }
                           },
						   {
						   		"details":"Back in the Toolkit, drag and drop deploy the provided BAR files named <span class='application'>JMSOutput.bar</span> which you will find inside the <span class='application'>ExampleJMSOutput</span> application and <span class='application'>JMSReceive.bar</span> which you will find inside the <span class='application'>ExampleJMSReceive</span> application."
                    		}							
                        ]
                     }
                  }
             ]
                },
                "helpLinks": 
				{
                }
            },
            "run": 
			{
                "overview": 
				{
                    "name": "Run",
                    "heading": "",
                    "_runComment": "The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
                "sections":[                            
{
                                "section": "<h4>Use the Flow Exerciser to test the tutorial scenario",
                                "steps": {
                                    "type": "ordered",
                                    "details": [                                      
                                    {
                                        "details": "Open <span class='resource'>JMSOutput.msgflow</span>.",
                                        "substeps":{
                                        "type": "unordered",
                                        "details": 
								        [
                                        {
                                          "details": "Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                                        },										
										{
                                            "details": "Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                                        },
                                        {
                                            "details": "A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a green line is shown plotting the full path of the message through the flow."
                				        }
                                        ]
                                        }
                                    },
									{
                                        "details": "Open <span class='resource'>JMSReceive.msgflow</span>.",
                                        "substeps":{
                                        "type": "unordered",
                                        "details": 
								        [
                                        {
                                          "details": "Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                                        },										
										{
                                            "details": "Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                                        },
                                        {
                                            "details": "A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The response message which is returned should match the data which was written to the JMS queue by the first message flow which contains this text:<br><span class='resource'>This hardcoded data will be written to and read from the JMS queue</span>"
                				        }
                                        ]
                                        }
                                    }
									
                                ]
                            }
                        },
			{
			    "section": "This tutorial has shown how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager."
			}
                    ]
                },
                "helpLinks": 
				{
                    "title": "Find out more",
                    "details": 
					[
 						{
                            "title": "IBM Documentation link to ",
                            "description": "JMSReceive node",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc19200_.htm",
							"type": "web"
                        },
 						{
                            "title": "IBM Documentation link to ",
                            "description": "JMSOutput node",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac24830_.htm",
							"type": "web"
                        },						
						{
                            "title": "IBM Documentation link to ",
                            "description": "Testing your message flow by using the Flow exerciser",
                            "link": "https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm",
							"type": "web"
                        }
                    ]
                }
            }
        }
    }
}